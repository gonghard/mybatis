1.1.整体思路是
    1.1.1.一个接口操作的表是同一个表，在接口类上通过注解的形式说明接口以下内容
          表名(原始表面是什么),支持多个表名
          形参参数名(可以通过参数名得到对应的值来得到表的index)，支持多个形参参数名
    1.1.2.mybatis映射文件namespace值是接口的全限定名
    1.1.3.自定义实现mybatis的拦截器进行sql拦截，修改原始sql
1.2.具体实现
    1.2.1.表标记注解类
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;
    import java.lang.annotation.Target;

    @Target(value = { ElementType.TYPE })
    @Retention(RetentionPolicy.RUNTIME)
    public @interface TableTag {
    	/**
    	 * 多个表名
    	 * 
    	 * @return
    	 */
    	String[] tablesName();
    
    	/**
    	 * 多个表名对应参数值的名称
    	 * 
    	 * @return
    	 */
    	String[] shardByFields();
    
    }
    1.2.3.根据参数，表标记，修改原始sql匹配表名加上对应的表Index帮助类
    
            import java.util.Map;
            
            import org.apache.ibatis.mapping.BoundSql;
            
            import com.sosino.core.annotation.mybatis.TableTag;
            /**
             * 根据参数，表标记，修改原始sql匹配表名加上对应的表Index
             * @author aiqi.gong
             *
             */
            public class AnalyzeSqlTableIndex {
            	private TableTag tableTag;
            	private String originalSql;
            	private BoundSql boundSql;
            
            	public AnalyzeSqlTableIndex(BoundSql boundSql, TableTag tableTag, String originalSql) {
            		this.boundSql = boundSql;
            		this.tableTag = tableTag;
            		this.originalSql = originalSql;
            	}
            
            	public String getNewSqlByTableIndex() {
            		String[] tabNames = tableTag.tablesName();
            		String[] tabIndex = tableTag.shardByFields();
            		int tableIndx = 0;
            		for (int i = 0; i < tabIndex.length; i++) {
            			String val = (String) getFieldValue(tabIndex[i]);
            			tableIndx = TableIndexUtil.getInstance().getIndex(val);
            			originalSql = originalSql.replaceAll(tabNames[i], tabNames[i] + tableIndx);
            		}
            		return originalSql;
            	}
            
            	private Object getFieldValue(String propertyName) {
            		Object obj = boundSql.getParameterObject();
            		Map<String, Object> params = null;
            		if (obj instanceof Map) {
            			params = (Map<String, Object>) obj;
            		}
            		return params.get(propertyName);
            	}
            
            }
    1.2.4.根据id算表索引帮助类
          public class TableIndexUtil {
            	private static TableIndexUtil tableIndexUtil = null;
            
            	private TableIndexUtil() {
            
            	}
            
            	public static TableIndexUtil getInstance() {
            		if (tableIndexUtil == null) {
            			synchronized (TableIndexUtil.class) {
            				if (tableIndexUtil == null) {
            					tableIndexUtil = new TableIndexUtil();
            				}
            			}
            		}
            		return tableIndexUtil;
            	}
            
            	/**
            	 * 根据主键策略算索引
            	 * 
            	 * @param id
            	 * @return
            	 */
            	public int getIndex(String id) {
            		return Math.abs(id.hashCode()) % 10;
            	}
            
            	public static void main(String[] args) {
            		System.out.println(TableIndexUtil.getInstance().getIndex("1"));
            	}

    }
    1.2.5. 自定义实现mybatis拦截器
        
            import java.sql.Connection;
            import java.util.Properties;
            
            import org.apache.ibatis.executor.statement.StatementHandler;
            import org.apache.ibatis.mapping.BoundSql;
            import org.apache.ibatis.mapping.MappedStatement;
            import org.apache.ibatis.plugin.Interceptor;
            import org.apache.ibatis.plugin.Intercepts;
            import org.apache.ibatis.plugin.Invocation;
            import org.apache.ibatis.plugin.Plugin;
            import org.apache.ibatis.plugin.Signature;
            import org.apache.ibatis.reflection.MetaObject;
            import org.apache.ibatis.reflection.SystemMetaObject;
            
            import com.sosino.core.annotation.mybatis.TableTag;
            
            @Intercepts({ @Signature(type = StatementHandler.class, method = "prepare", args = { Connection.class }) })
            public class TableIndexInterceptor implements Interceptor {
            
            	@Override
            	public Object intercept(Invocation invocation) throws Throwable {
            		StatementHandler statementHandler = (StatementHandler) invocation.getTarget();
            		MetaObject metaStatementHandler = SystemMetaObject.forObject(statementHandler);
            		String originalSql = (String) metaStatementHandler.getValue("delegate.boundSql.sql");
            		BoundSql boundSql = (BoundSql) metaStatementHandler.getValue("delegate.boundSql");
            		MappedStatement mappedStatement = (MappedStatement) metaStatementHandler.getValue("delegate.mappedStatement");
            		String id = mappedStatement.getId();
            		System.out.println(id);
            		String className = id.substring(0, id.lastIndexOf("."));
            		Class<?> classObj = Class.forName(className);
            		// 根据配置自动生成分表SQL
            		TableTag tableSeg = classObj.getAnnotation(TableTag.class);
            		if (tableSeg == null) {
            			return invocation.proceed();
            		}
            		AnalyzeSqlTableIndex analyzeSqlTableIndex = new AnalyzeSqlTableIndex(boundSql, tableSeg, originalSql);
            		metaStatementHandler.setValue("delegate.boundSql.sql", analyzeSqlTableIndex.getNewSqlByTableIndex());
            		return invocation.proceed();
            	}
            
            	public Object plugin(Object target) {
            		// 当目标类是StatementHandler类型时，才包装目标类，否者直接返回目标本身,减少目标被代理的
            		// 次数
            		if (target instanceof StatementHandler) {
            			return Plugin.wrap(target, this);
            		} else {
            			return target;
            		}
            	}
            
            	@Override
            	public void setProperties(Properties properties) {
            		// TODO Auto-generated method stub
            
            	}
            
            }
     1.2.6.在mapper添加表说明
          @TableTag(tablesName = "t_wms_log", shardByFields = "tab_index")
          public interface TWmsWeixinLogMapper {}
      
    
     
